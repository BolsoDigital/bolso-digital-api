import json
import os

import requests
from langchain.prompts import PromptTemplate
from langchain_openai import ChatOpenAI

from app.repositories.expense_repository import ExpenseRepository
from app.utils import parse_expense_from_image

CATEGORIAS_VALIDAS = [
    'alimenta√ß√£o',
    'transporte',
    'aluguel',
    'servi√ßos',
    'sa√∫de',
    'educa√ß√£o',
    'lazer',
    'outros',
]


class ProcessReceiptUseCase:
    def __init__(self, db):
        self.repository = ExpenseRepository(db)

    def interpret_text_with_ai(self, text):
        prompt = PromptTemplate.from_template(
            """
            Analise o texto do documento financeiro abaixo.
            Ele pode ser um comprovante de Pix, TED, DOC, Compra no d√©bito, Compra no cr√©dito, ou um boleto banc√°rio.
            Se algum dado n√£o estiver presente no texto, deixe o campo vazio ("").
            N√£o invente valores.
            Texto do comprovante:
            {text}

            
            - A data pode aparecer junto com a hora (exemplo: "02/10/2025 - 21:40:58").
            - Nesse caso, separe a data em "02/10/2025" e a hora em "21:40:58".
            - Se tiver c√≥digo de barras ent√£o √© um boleto.
            Retorne em formato JSON com as seguintes chaves:
            - valor (float)
            - data (formato dd/mm/yyyy)
            - hora (formato HH:MM:SS)
            - destinatario (nome, CPF, banco)
            - pagador (nome, CPF, institui√ß√£o)
            - categoria (escolha entre: alimenta√ß√£o, transporte, aluguel, servi√ßos, sa√∫de, educa√ß√£o, lazer, outros)
            - Tipo de transferencia: (Pix, Boleto, TED, DOC, Cr√©dito, D√©bito ou outro)
            """
        )
        llm = ChatOpenAI(temperature=0, model='gpt-3.5-turbo')
        chain = prompt | llm
        result = chain.invoke({'text': text})
        print("üí¨ Prompt enviado para o modelo:", {text})
        print("üîé Sa√≠da do modelo:", result.content)
        try:
            dados = json.loads(result.content)
            categoria = dados.get('categoria', '').strip().lower()
            if categoria not in CATEGORIAS_VALIDAS:
                dados['categoria'] = 'outros'
            return dados
        except json.JSONDecodeError as e:
            raise ValueError(
                f'Erro ao converter resposta da IA para JSON: {e}'
            )

    async def execute(self, file, id_user):
        parsed_data = await parse_expense_from_image(file)
        if not parsed_data:
            raise ValueError('Texto n√£o reconhecido na imagem')
        structured_data = self.interpret_text_with_ai(parsed_data.get("raw_text", ""))
        expense = self.repository.save(structured_data, id_user)
        return {'dados_extraidos': structured_data, 'id_registro': expense.id}
